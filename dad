Hoarau William HOARA
Point à remplir 
L’histoire du jeu : Un voleur venu tout droit d’un monde médiéval tente de dérober un diamant d’une valeur jamais égalé gardé par des chevaliers surveillant sans relâche chaque parcelle du château  
Concept du jeu :
Braquage en plateforme type zelda link to the past 

Objectifs et missions 
Entrée dans le château notre objectif est de détenir un diamant 
Battre tous les gardes (+boss) et prendre le diamant 
Sous la surveillance de gardes et d’un chef garde qui sera dans la pièce finale 
Gameplay 
Elément cassable avec 1/10 d’avoir une dagues  
Le personnage possède 3 cœurs comme signe de vie 
Le personnage peut se déplacer (H,B,G,D) il peut donner des coups d’épée.
Lance des dagues à distance qui font 1/4 moins de dégâts qu’un coup d’épée. Possède 3 slots 
Les ennemis infligent des dégâts i
Le personnage possède un dash vers l’avant + délais de 1 sec de CD après utilisation 
Les ennemis attaquent 
Les dialogues se feront pendant la partie 
ZQSD : touche directionnel
Art et conception du son
8bit 
Interface utilisateur (UI)
Cœur + CD dash + Temps de gameplay 
Technologie 
ZQSD : touche directionnel
SHIFT : DASH
I : Dague 
O : Coup d’épée 
Gestion de projet
Pour coder un jeu en sept jours selon les spécifications données, voici une gestion de projet simplifiée :
Gestion de Projet pour le Jeu de Plateforme en 7 jours :
Jour 1 - Jour 2 : Conception et Planification
Jour 1 : Révision détaillée du Concept Design Document (CDD), identification des tâches clés (développement, art, son, UI) et répartition des responsabilités.
Jour 2 : Finalisation de la conception détaillée, création des wireframes pour l'interface utilisateur, démarrage du développement du moteur de jeu et des mécanismes de déplacement du personnage.
Jour 3 - Jour 4 : Développement du Gameplay
Jour 3 : Mise en place des éléments cassables avec la probabilité de drop de dagues, implémentation du système de dégâts et des déplacements du personnage.
Jour 4 : Intégration des attaques, du système de vie, du dash, des dialogues en cours de jeu, début de l'implémentation des ennemis et du système de combat.
Jour 5 - Jour 6 : Art, Son et Polissage
Jour 5 : Création des éléments graphiques en 8-bit (sprites, décors), conception des effets sonores et de la musique adaptée au style visuel.
Jour 6 : Intégration des éléments artistiques dans le jeu, polissage du gameplay, résolution des bugs, optimisation des performances.
Jour 7 : Tests et Finalisation
Tests intensifs pour déceler et corriger les problèmes résiduels.
Finalisation de l'interface utilisateur (UI) avec affichage des cœurs, du cooldown du dash et du temps de jeu.
Livraison du jeu avec la configuration des touches (ZQSD pour déplacement, SHIFT pour dash, I pour dague, O pour coup d'épée) et documentation complète.
Répartition des tâches par équipe :
Développeurs : Implémentation des mécaniques de jeu, déplacements, attaques, et intégration des éléments.
Artistes : Création des sprites, décors, éléments graphiques 8-bit.
Sound Designers : Création des effets sonores et de la musique rétro.
UI/UX Designers : Conception et intégration de l'interface utilisateur.
Cette planification est dense et exigeante, il est essentiel de rester flexible pour ajuster les priorités en fonction des défis rencontrés. Une communication efficace et une collaboration étroite entre les membres de l'équipe sont primordiales pour respecter les délais et livrer un jeu de qualité.

LI G2 (nom prénom) 
contact@florent.fr 
Hoarau William 

import pygame




# Initialize the game engine
pygame.init()


# Set the height and width of the screen
screen_width = 700
screen_height = 400
screen = pygame.display.set_mode([screen_width, screen_height])


# This sets the name of the window
pygame.display.set_caption("Collision Example")


# Set the background color
background = pygame.Surface(screen.get_size())
background = background.convert()
background.fill((255, 255, 255))




class Ball(pygame.sprite.Sprite):
    # Constructor. Pass in the color of the block, and its x and y position
    def __init__(self, color, width, height):
        # Call the parent class (Sprite) constructor
        super().__init__()


        # Create an image of the block, and fill it with a color.
        # This could also be an image loaded from the disk.
        self.image = pygame.Surface([width, height])
        self.image.fill(color)


        # Fetch the rectangle object that has the dimensions of the image
        self.rect = self.image.get_rect()


        # set speed
        self.velocity_x = 0
        self.velocity_y = 0


    def move(self):
        self.rect.x += self.velocity_x
        self.rect.y += self.velocity_y


    def draw_rect(self):
        pygame.draw.rect(screen, (0, 0, 0), self.rect)




if __name__ == "__main__":
    ball = Ball((255, 0, 0), 20, 15)
    ball.rect.x = 100
    ball.rect.y = 100


    all_sprites_list = pygame.sprite.Group()
    all_sprites_list.add(ball)


    clock = pygame.time.Clock()


    done = False


    while not done:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    ball.velocity_x = -3
                elif event.key == pygame.K_RIGHT:
                    ball.velocity_x = 3
                elif event.key == pygame.K_UP:
                    ball.velocity_y = -3
                elif event.key == pygame.K_DOWN:
                    ball.velocity_y = 3
            elif event.type == pygame.KEYUP:
                if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                    ball.velocity_x = 0
                elif event.key == pygame.K_UP or event.key == pygame.K_DOWN:
                    ball.velocity_y = 0
        # Apply gravity
        ball.change_y += 0.35
        ball.move()


        screen.fill((255, 255, 255))


        ball.draw_rect()


        all_sprites_list.draw(screen)


        pygame.display.flip()


        clock.tick(60)


    pygame.quit()
